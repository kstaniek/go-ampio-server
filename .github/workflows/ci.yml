name: CI

on:
  push:
    branches: [ main, master ]
    tags: [ '*.*.*' ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  actions: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint / Vet
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true
      - name: Format check
        run: make fmt-check
      - name: Vet
        run: go vet ./...
      - name: Static Check
        uses: dominikh/staticcheck-action@v1
      - name: Go Vulnerability Check
        uses: golang/govulncheck-action@v1
  test:
    name: Test (matrix)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go: [ '1.24.x' ]
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: true
      - name: Run tests (race)
        run: make test-race
      - name: Coverage (latest only)
        if: matrix.go == '1.24.x'
        run: make cover
      - name: Smoke test (latest only)
        if: matrix.go == '1.24.x'
        run: make smoke-test
      - name: Upload coverage artifact
        if: matrix.go == '1.24.x'
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            coverage.out
            coverage.html

  fuzz:
    name: Fuzz (short)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/heads/')
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true
      - name: Fuzz codec (short)
        run: make FUZZTIME=5s fuzz-smoke
      - name: Fuzz server decode (short)
        run: make FUZZTIME=5s fuzz-server

  stress:
    name: Stress (broadcast)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/heads/')
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true
      - name: Run stress test
        run: go test -run TestStressBroadcast -count=1 ./internal/server

  build:
    name: Build binaries
    runs-on: ubuntu-latest
    needs: [ test, lint ]
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true
      - name: Build host
        run: make build
      - name: Cross build
        run: make build-cross
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: |
            bin/can-server
            bin/linux-amd64/can-server
            bin/linux-arm64/can-server

  goreleaser:
    name: Release (goreleaser)
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs: [ lint, test ]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: Enforce tag format x.y.z
        run: |
          TAG=${GITHUB_REF##*/}
          if ! echo "$TAG" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Tag $TAG invalid (expected x.y.z without leading v)"; exit 1; fi
      - name: GoReleaser release
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean --skip=validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
